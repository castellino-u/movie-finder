üéØ Objetivo del proyecto:
Un buscador de pel√≠culas con React + TypeScript que:
    Tiene una barra de b√∫squeda para ingresar el t√≠tulo de una pel√≠cula.

    Consulta la API de OMDb.

    Muestra los resultados en cartas (cards), 10 por p√°gina.

üìå Herramientas que vas a usar:
React (con Functional Components - FC)
    -TypeScript
    -Axios (para hacer las requests)
    -useState y useEffect (hooks de React)

No store global (Zustand) por ahora, se puede agregar despu√©s


‚úÖ Pasos del proyecto
    -Configurar Axios para trabajar con la API de OMDb.

    -Crear componentes funcionales (FC): Barra de b√∫squeda, lista de pel√≠culas, card individual.

    -Agregar estado local con useState para controlar la b√∫squeda y los resultados.

    -Manejar eventos con onChange y onClick para capturar el input y hacer la b√∫squeda.

    -Hacer la petici√≥n HTTP a la API con Axios cuando el usuario busque algo.

    -Renderizar los datos recibidos de la API en un componente.

    -Manejar errores, loading y estados vac√≠os (por ejemplo, cuando no hay resultados).

    -Agregar paginaci√≥n b√°sica si quer√©s mostrar de a 10.

    -(Opcional) Estilos con CSS o Tailwind.


---------------------------------------------------------------------------------------
-----------------------üîç ¬øQu√© es cada cosa?-------------------------------------------
---------------------------------------------------------------------------------------
üéØ Componentes funcionales (FC)
‚úÖ 1. Componentes funcionales (Functional Components ‚Äì FC)
Un componente funcional es simplemente una funci√≥n de JavaScript o TypeScript que devuelve JSX (estructura HTML con l√≥gica de React).

    üí° ¬øPor qu√© usamos componentes funcionales?

    Son simples de entender.

    Se integran perfectamente con los hooks (useState, useEffect, etc.).

    Son reutilizables (los pod√©s usar varias veces en otros lugares).

    Ejemplo l√≥gico (sin c√≥digo):
    Imagin√° que cre√°s una caja con un input y un bot√≥n, y quer√©s poder reutilizar esa "caja" en otro lugar. Eso es un componente.

    M√°s info oficial: https://react.dev/learn/your-first-component

üß† Estado local con useState
‚úÖ 2. useState: Guardar estados (como el texto que escribe el usuario)
React no "recuerda" lo que pasa en el navegador por s√≠ solo. Para eso usamos useState, que guarda valores temporales como:

    Lo que el usuario escribe en un input.

    Una lista de pel√≠culas que vino de una API.

    Si el componente est√° cargando o no.

    ts
    Copiar
    Editar
    const [algo, setAlgo] = useState(valorInicial);
    Es como decir:

    algo: el valor actual

    setAlgo: c√≥mo cambiarlo

Doc oficial: https://react.dev/reference/react/useState

üé£ onChange y onClick
‚úÖ 3. onChange y onClick (eventos)
Eventos son acciones del usuario (clicks, escritura, etc.)
    Se escriben en camelCase y se agregan como atributos a los elementos.

    onChange: cuando el usuario escribe en el input.

    onClick: cuando toca un bot√≥n.

    üéØ Ejemplo mental:

    Quiero que cada vez que el usuario escriba, se actualice un estado.

    Quiero que cuando haga clic, se dispare una funci√≥n.

üì° Axios y la API
‚úÖ 4. Axios (o fetch)
axios es una librer√≠a para hacer peticiones HTTP. Ya lo ten√©s, as√≠ que esto lo dejamos para m√°s adelante, pero te dejo el resumen:

    axios.get(URL).then((res) => console.log(res.data));

 Podes leer documentaci√≥n de la api en: https://www.omdbapi.com/


 
üé¨ Parte 2: Primer mini objetivo ‚Üí Crear un componente funcional con input y bot√≥n
    üß© ¬øQu√© vamos a lograr?
    Queremos que:

    Tengas un componente que muestre un input y un bot√≥n.

    El input est√© conectado con un useState ‚Üí o sea, guarde lo que el usuario escribe.

    Al hacer clic en el bot√≥n, mostrar ese texto en consola.



üìÑ ¬øC√≥mo se ve un componente funcional?
Es una funci√≥n que devuelve JSX.

Debe comenzar con may√∫scula (por convenci√≥n).

La export√°s para usarla en otros archivos (por ejemplo en App.tsx).

üì¶ src/components/SearchBar.tsx

tsx
Copiar
Editar
import React from 'react';

const SearchBar: React.FC = () => {
  return (
    <div>
      <input type="text" />
      <button>Buscar</button>
    </div>
  );
};

export default SearchBar;
Ac√° todav√≠a no hay funcionalidad. Esto es solo estructura.


üì¶ Tipado en TypeScript
La respuesta de la API va a tener una forma, por ejemplo:

json
Copiar
Editar
{
  "Search": [
    {
      "Title": "Batman Begins",
      "Year": "2005",
      "imdbID": "tt0372784",
      "Type": "movie",
      "Poster": "https://..."
    },
    ...
  ],
  "totalResults": "405",
  "Response": "True"
}
Pod√©s crear una interface en TypeScript que describa eso.